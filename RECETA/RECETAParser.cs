//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\any_c\source\repos\RECETA\RECETA\RECETA.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class RECETAParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, INT=13, FLOAT=14, WS=15, SEP=16, GUION=17, 
		NEWLINE=18, TAB=19, TXT=20;
	public const int
		RULE_receta = 0, RULE_nombre = 1, RULE_ingreItem = 2, RULE_elaItem = 3, 
		RULE_nom = 4, RULE_por = 5, RULE_tp = 6, RULE_tc = 7, RULE_clr = 8, RULE_ing = 9, 
		RULE_ela = 10, RULE_minSTR = 11, RULE_number = 12, RULE_min = 13, RULE_porc = 14, 
		RULE_calo = 15;
	public static readonly string[] ruleNames = {
		"receta", "nombre", "ingreItem", "elaItem", "nom", "por", "tp", "tc", 
		"clr", "ing", "ela", "minSTR", "number", "min", "porc", "calo"
	};

	private static readonly string[] _LiteralNames = {
		null, "')'", "'RECETA'", "'PORCIONES'", "'TIEMPO PREPARACION'", "'TIEMPO COCCION'", 
		"'CALORIAS'", "'INGREDIENTES'", "'ELABORACION'", "'MIN'", "'min'", "'personas'", 
		"'kcal'", null, null, "' '", "':'", "'-'", "'\n'", "'\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "INT", "FLOAT", "WS", "SEP", "GUION", "NEWLINE", "TAB", "TXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RECETA.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RECETAParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RECETAParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RECETAParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RecetaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RECETAParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NombreContext[] nombre() {
			return GetRuleContexts<NombreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NombreContext nombre(int i) {
			return GetRuleContext<NombreContext>(i);
		}
		public RecetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receta; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecetaContext receta() {
		RecetaContext _localctx = new RecetaContext(Context, State);
		EnterRule(_localctx, 0, RULE_receta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32;
				nombre();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==GUION );
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NombreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NomContext nom() {
			return GetRuleContext<NomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PorContext por() {
			return GetRuleContext<PorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TpContext tp() {
			return GetRuleContext<TpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TcContext tc() {
			return GetRuleContext<TcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClrContext clr() {
			return GetRuleContext<ClrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngContext ing() {
			return GetRuleContext<IngContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaContext ela() {
			return GetRuleContext<ElaContext>(0);
		}
		public NombreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nombre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNombre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NombreContext nombre() {
		NombreContext _localctx = new NombreContext(Context, State);
		EnterRule(_localctx, 2, RULE_nombre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			nom();
			State = 40;
			por();
			State = 41;
			tp();
			State = 42;
			tc();
			State = 43;
			clr();
			State = 44;
			ing();
			State = 45;
			ela();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngreItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(RECETAParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(RECETAParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXT() { return GetToken(RECETAParser.TXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		public IngreItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingreItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngreItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IngreItemContext ingreItem() {
		IngreItemContext _localctx = new IngreItemContext(Context, State);
		EnterRule(_localctx, 4, RULE_ingreItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(TAB);
			State = 48;
			number();
			State = 49;
			Match(WS);
			State = 50;
			Match(TXT);
			State = 51;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(RECETAParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(RECETAParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXT() { return GetToken(RECETAParser.TXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		public ElaItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaItemContext elaItem() {
		ElaItemContext _localctx = new ElaItemContext(Context, State);
		EnterRule(_localctx, 6, RULE_elaItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(TAB);
			State = 54;
			number();
			State = 55;
			Match(T__0);
			State = 56;
			Match(WS);
			State = 57;
			Match(TXT);
			State = 58;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RECETAParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(RECETAParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(RECETAParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RECETAParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXT() { return GetToken(RECETAParser.TXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		public NomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NomContext nom() {
		NomContext _localctx = new NomContext(Context, State);
		EnterRule(_localctx, 8, RULE_nom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(GUION);
			State = 61;
			Match(WS);
			State = 62;
			Match(T__1);
			State = 63;
			Match(SEP);
			State = 64;
			Match(WS);
			State = 65;
			Match(TXT);
			State = 66;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RECETAParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(RECETAParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(RECETAParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RECETAParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PorcContext porc() {
			return GetRuleContext<PorcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		public PorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_por; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PorContext por() {
		PorContext _localctx = new PorContext(Context, State);
		EnterRule(_localctx, 10, RULE_por);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(GUION);
			State = 69;
			Match(WS);
			State = 70;
			Match(T__2);
			State = 71;
			Match(SEP);
			State = 72;
			Match(WS);
			State = 73;
			porc();
			State = 74;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RECETAParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(RECETAParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(RECETAParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RECETAParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MinContext min() {
			return GetRuleContext<MinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		public TpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TpContext tp() {
		TpContext _localctx = new TpContext(Context, State);
		EnterRule(_localctx, 12, RULE_tp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(GUION);
			State = 77;
			Match(WS);
			State = 78;
			Match(T__3);
			State = 79;
			Match(SEP);
			State = 80;
			Match(WS);
			State = 81;
			min();
			State = 82;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RECETAParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(RECETAParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(RECETAParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RECETAParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MinContext min() {
			return GetRuleContext<MinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		public TcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TcContext tc() {
		TcContext _localctx = new TcContext(Context, State);
		EnterRule(_localctx, 14, RULE_tc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(GUION);
			State = 85;
			Match(WS);
			State = 86;
			Match(T__4);
			State = 87;
			Match(SEP);
			State = 88;
			Match(WS);
			State = 89;
			min();
			State = 90;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RECETAParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(RECETAParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(RECETAParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RECETAParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaloContext calo() {
			return GetRuleContext<CaloContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		public ClrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClrContext clr() {
		ClrContext _localctx = new ClrContext(Context, State);
		EnterRule(_localctx, 16, RULE_clr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(GUION);
			State = 93;
			Match(WS);
			State = 94;
			Match(T__5);
			State = 95;
			Match(SEP);
			State = 96;
			Match(WS);
			State = 97;
			calo();
			State = 98;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RECETAParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(RECETAParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RECETAParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IngreItemContext[] ingreItem() {
			return GetRuleContexts<IngreItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngreItemContext ingreItem(int i) {
			return GetRuleContext<IngreItemContext>(i);
		}
		public IngContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIng(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IngContext ing() {
		IngContext _localctx = new IngContext(Context, State);
		EnterRule(_localctx, 18, RULE_ing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(GUION);
			State = 101;
			Match(WS);
			State = 102;
			Match(T__6);
			State = 103;
			Match(SEP);
			State = 104;
			Match(NEWLINE);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 105;
				ingreItem();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TAB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RECETAParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(RECETAParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RECETAParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RECETAParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElaItemContext[] elaItem() {
			return GetRuleContexts<ElaItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaItemContext elaItem(int i) {
			return GetRuleContext<ElaItemContext>(i);
		}
		public ElaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ela; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEla(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaContext ela() {
		ElaContext _localctx = new ElaContext(Context, State);
		EnterRule(_localctx, 20, RULE_ela);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(GUION);
			State = 111;
			Match(WS);
			State = 112;
			Match(T__7);
			State = 113;
			Match(SEP);
			State = 114;
			Match(NEWLINE);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 115;
				elaItem();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TAB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinSTRContext : ParserRuleContext {
		public MinSTRContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minSTR; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinSTR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinSTRContext minSTR() {
		MinSTRContext _localctx = new MinSTRContext(Context, State);
		EnterRule(_localctx, 22, RULE_minSTR);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RECETAParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RECETAParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 24, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(RECETAParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MinSTRContext minSTR() {
			return GetRuleContext<MinSTRContext>(0);
		}
		public MinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_min; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinContext min() {
		MinContext _localctx = new MinContext(Context, State);
		EnterRule(_localctx, 26, RULE_min);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			number();
			State = 125;
			Match(WS);
			State = 126;
			minSTR();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PorcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(RECETAParser.WS, 0); }
		public PorcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_porc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPorc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PorcContext porc() {
		PorcContext _localctx = new PorcContext(Context, State);
		EnterRule(_localctx, 28, RULE_porc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			number();
			State = 129;
			Match(WS);
			State = 130;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaloContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(RECETAParser.WS, 0); }
		public CaloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRECETAVisitor<TResult> typedVisitor = visitor as IRECETAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaloContext calo() {
		CaloContext _localctx = new CaloContext(Context, State);
		EnterRule(_localctx, 30, RULE_calo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			number();
			State = 133;
			Match(WS);
			State = 134;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', '\x8B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x6', '\x2', '$', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '%', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x6', '\v', 'm', '\n', '\v', '\r', '\v', '\xE', 
		'\v', 'n', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x6', '\f', 'w', '\n', '\f', '\r', '\f', '\xE', '\f', 
		'x', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x2', '\x2', '\x12', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\x2', '\x4', '\x3', '\x2', '\v', '\f', '\x3', '\x2', 
		'\xF', '\x10', '\x2', '}', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', 
		')', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x37', '\x3', '\x2', '\x2', '\x2', '\n', '>', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x46', '\x3', '\x2', '\x2', '\x2', '\xE', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'V', '\x3', '\x2', '\x2', '\x2', '\x12', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x66', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x18', 'z', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '|', '\x3', '\x2', '\x2', '\x2', '\x1C', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x82', '\x3', '\x2', '\x2', '\x2', ' ', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\"', '$', '\x5', '\x4', '\x3', '\x2', '#', '\"', 
		'\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x2', '\x2', 
		'\x3', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x5', '\n', 
		'\x6', '\x2', '*', '+', '\x5', '\f', '\a', '\x2', '+', ',', '\x5', '\xE', 
		'\b', '\x2', ',', '-', '\x5', '\x10', '\t', '\x2', '-', '.', '\x5', '\x12', 
		'\n', '\x2', '.', '/', '\x5', '\x14', '\v', '\x2', '/', '\x30', '\x5', 
		'\x16', '\f', '\x2', '\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\a', '\x15', '\x2', '\x2', '\x32', '\x33', '\x5', '\x1A', '\xE', 
		'\x2', '\x33', '\x34', '\a', '\x11', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\x16', '\x2', '\x2', '\x35', '\x36', '\a', '\x14', '\x2', '\x2', '\x36', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x15', '\x2', 
		'\x2', '\x38', '\x39', '\x5', '\x1A', '\xE', '\x2', '\x39', ':', '\a', 
		'\x3', '\x2', '\x2', ':', ';', '\a', '\x11', '\x2', '\x2', ';', '<', '\a', 
		'\x16', '\x2', '\x2', '<', '=', '\a', '\x14', '\x2', '\x2', '=', '\t', 
		'\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x13', '\x2', '\x2', '?', 
		'@', '\a', '\x11', '\x2', '\x2', '@', '\x41', '\a', '\x4', '\x2', '\x2', 
		'\x41', '\x42', '\a', '\x12', '\x2', '\x2', '\x42', '\x43', '\a', '\x11', 
		'\x2', '\x2', '\x43', '\x44', '\a', '\x16', '\x2', '\x2', '\x44', '\x45', 
		'\a', '\x14', '\x2', '\x2', '\x45', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\a', '\x13', '\x2', '\x2', 'G', 'H', '\a', '\x11', '\x2', 
		'\x2', 'H', 'I', '\a', '\x5', '\x2', '\x2', 'I', 'J', '\a', '\x12', '\x2', 
		'\x2', 'J', 'K', '\a', '\x11', '\x2', '\x2', 'K', 'L', '\x5', '\x1E', 
		'\x10', '\x2', 'L', 'M', '\a', '\x14', '\x2', '\x2', 'M', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\a', '\x13', '\x2', '\x2', 'O', 'P', '\a', 
		'\x11', '\x2', '\x2', 'P', 'Q', '\a', '\x6', '\x2', '\x2', 'Q', 'R', '\a', 
		'\x12', '\x2', '\x2', 'R', 'S', '\a', '\x11', '\x2', '\x2', 'S', 'T', 
		'\x5', '\x1C', '\xF', '\x2', 'T', 'U', '\a', '\x14', '\x2', '\x2', 'U', 
		'\xF', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x13', '\x2', '\x2', 
		'W', 'X', '\a', '\x11', '\x2', '\x2', 'X', 'Y', '\a', '\a', '\x2', '\x2', 
		'Y', 'Z', '\a', '\x12', '\x2', '\x2', 'Z', '[', '\a', '\x11', '\x2', '\x2', 
		'[', '\\', '\x5', '\x1C', '\xF', '\x2', '\\', ']', '\a', '\x14', '\x2', 
		'\x2', ']', '\x11', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\x13', 
		'\x2', '\x2', '_', '`', '\a', '\x11', '\x2', '\x2', '`', '\x61', '\a', 
		'\b', '\x2', '\x2', '\x61', '\x62', '\a', '\x12', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\x11', '\x2', '\x2', '\x63', '\x64', '\x5', ' ', '\x11', 
		'\x2', '\x64', '\x65', '\a', '\x14', '\x2', '\x2', '\x65', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x13', '\x2', '\x2', 'g', 'h', 
		'\a', '\x11', '\x2', '\x2', 'h', 'i', '\a', '\t', '\x2', '\x2', 'i', 'j', 
		'\a', '\x12', '\x2', '\x2', 'j', 'l', '\a', '\x14', '\x2', '\x2', 'k', 
		'm', '\x5', '\x6', '\x4', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\a', '\x13', '\x2', '\x2', 'q', 'r', '\a', '\x11', '\x2', 
		'\x2', 'r', 's', '\a', '\n', '\x2', '\x2', 's', 't', '\a', '\x12', '\x2', 
		'\x2', 't', 'v', '\a', '\x14', '\x2', '\x2', 'u', 'w', '\x5', '\b', '\x5', 
		'\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'y', '\x17', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\t', '\x2', 
		'\x2', '\x2', '{', '\x19', '\x3', '\x2', '\x2', '\x2', '|', '}', '\t', 
		'\x3', '\x2', '\x2', '}', '\x1B', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\x1A', '\xE', '\x2', '\x7F', '\x80', '\a', '\x11', '\x2', '\x2', 
		'\x80', '\x81', '\x5', '\x18', '\r', '\x2', '\x81', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x5', '\x1A', '\xE', '\x2', '\x83', '\x84', 
		'\a', '\x11', '\x2', '\x2', '\x84', '\x85', '\a', '\r', '\x2', '\x2', 
		'\x85', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x5', '\x1A', 
		'\xE', '\x2', '\x87', '\x88', '\a', '\x11', '\x2', '\x2', '\x88', '\x89', 
		'\a', '\xE', '\x2', '\x2', '\x89', '!', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'%', 'n', 'x',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
